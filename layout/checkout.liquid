<!DOCTYPE html>
<html lang="{{ locale }}" dir="{{ direction }}" class="{{ checkout_html_classes }}">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, user-scalable=0">
    <meta name="referrer" content="origin">

    <title>{{ page_title }}</title>

    {{ content_for_header }}

    {{ checkout_stylesheets }}
    <style>
      .display-none {
        display: none !important;
      }

      .product__description__variant {
        display: none;
      }

      .section--shipping-method .content-box__small-text {
        border: 0 ;
        clip: rect(0,0,0,0);
        height: 1px;
        margin: -1px;
        overflow: hidden;
        padding: 0;
        position: absolute;
        width: 1px;
      }
      .section--shipping-method .content-box__small-text + br {
        display: none;
      }
      {% if settings.checkout_link_color != blank %}
        a, .link {
          color: {{settings.checkout_link_color}};
        }
        a:hover, .link:hover {
          color: {{settings.checkout_link_color}};
        }
        .btn, .sp-modal-toggle {
          background-color: {{settings.checkout_link_color}};
        }
        .btn:hover, .sp-modal-toggle:hover {
          background-color: {{settings.checkout_link_color}};
        }
        .btn--subdued {
          color: #FFFFFF;
        }
        .input-checkbox:checked, .input-radio:checked {
          border-color: #D9D9D9;
          border-width: 5px;
          -webkit-box-shadow: 0 0 0 10px {{settings.checkout_link_color}} inset;
          box-shadow: 0 0 0 10px {{settings.checkout_link_color}} inset;
        }
        .input-checkbox:checked:focus, .input-radio:checked:focus {
          border-color: {{settings.checkout_link_color}};
        }
        .icon-svg--color-accent {
          color: {{settings.checkout_link_color}};
        }
        .step__footer__previous-link:hover .previous-link__icon {
          fill: {{settings.checkout_link_color}};
        }
      {% endif %}
      {% if settings.checkout_background_image != blank %}
        .no-js .sidebar,.no-generatedcontent .sidebar, .sidebar::after {
          background-image: url({{ settings.checkout_background_image | img_url: 'master' }});
        }
      {% endif %}

      .content-box__row.display-none + .content-box__row:not(.display-none) {
        border-top-width: 0;
      }
      .content-box__row:not(.display-none) ~ .content-box__row:not(.display-none) {
        border-top-width: 1px;
      }
    </style>
    {{ checkout_scripts }}
  </head>
  <body>
    {{ skip_to_content_link }}

    <header class="banner" data-header role="banner">
      <div class="wrap">
        {%- unless content_for_logo contains '<a' -%}
          <a href="{{ shop.secure_url }}" title="{{ 'cart.general.continue_shopping' | t }}">
        {%- endunless -%}
        {{ content_for_logo }}
        {%- unless content_for_logo contains '<a' -%}
          </a>
        {%- endunless -%}
      </div>
    </header>

    {{ order_summary_toggle }}
    <div class="content" data-content>
      <div class="wrap">
        <div class="main">
          <header class="main__header" role="banner">
            {%- unless content_for_logo contains '<a' -%}
              <a href="{{ shop.secure_url }}" title="{{ 'cart.general.continue_shopping' | t }}">
            {%- endunless -%}
            {{ content_for_logo }}
            {%- unless content_for_logo contains '<a' -%}
              </a>
            {%- endunless -%}
            {{ breadcrumb }}
            {{ alternative_payment_methods }}
          </header>
          <main class="main__content" role="main">
            {{ content_for_layout }}
          </main>
          <footer class="main__footer" role="contentinfo">
            {{ content_for_footer }}
          </footer>
        </div>
        <aside class="sidebar" role="complementary">
          <div class="sidebar__header">
            {%- unless content_for_logo contains '<a' -%}
              <a href="{{ shop.secure_url }}" title="{{ 'cart.general.continue_shopping' | t }}">
            {%- endunless -%}
            {{ content_for_logo }}
            {%- unless content_for_logo contains '<a' -%}
              </a>
            {%- endunless -%}
          </div>
          <div class="sidebar__content">
            {{ content_for_order_summary }}
          </div>
        </aside>
      </div>
    </div>

    {{ tracking_code }}
    {%- capture cart_attributes -%}
      {%- for attribute in checkout.attributes -%}
        <input type="hidden" name="checkout[attributes][{{ attribute.first }}]" value="{{ attribute.last }}">
      {%- endfor -%}
    {%- endcapture -%}
    {%- assign cart_attributes = cart_attributes | strip_newlines | strip -%}
    {%- assign hide_delivery = false -%}
    {%- assign hide_pickup = false -%}
    {%- for item in checkout.line_items -%}
      {%- assign product = item.product -%}
      {%- if product.tags contains 'delivery-only' -%}
        {%- assign hide_pickup = true -%}
        {% break %}
      {%- elsif product.tags contains 'pickup-only' -%}
        {%- assign hide_delivery = true -%}
        {% break %}
      {%- endif -%}
    {%- endfor -%}
    <script>
      {%- if hide_delivery -%}
        const hideDelivery = true;
      {%- elsif hide_pickup -%}
        const hidePickup = true;
      {%- endif -%}
      const cartAttributes = '{{ cart_attributes }}';

      const hideDeliveryOptions = function () {
        if (typeof hideDelivery !== 'undefined') {
          hideOption('pickup');
        } else if (typeof hidePickup !== 'undefined') {
          hideOption('delivery');
        }
      };

      const hideOption = function (deliveryMethod) {
        const contentBox = document.querySelector('#checkout_pick_up_in_store_selected + .content-box');
        const labels = [].slice.call(contentBox.getElementsByClassName('radio__label__primary'));
        for (let i = 0; i < labels.length; i++) {
          const label = labels[i].innerHTML.trim();
          let hide = false;

          if (deliveryMethod === 'pickup' && label.indexOf('ick') < 0) {
            hide = true;
          } else if (deliveryMethod !== 'pickup' && label.indexOf('ick') > -1) {
            hide = true;
          }

          const container = labels[i].parentNode.parentNode.parentNode;
          const input = container.getElementsByClassName('input-radio');
          if (hide === true) {
            container.classList.add('display-none');
          }

          input[0].checked = !hide;
        }
      }

      const hideShippingMethods = function () {
        const deliveryType = window.localStorage.getItem('delivery_type');
        const labels = [].slice.call(document.getElementsByClassName('radio__label__primary'));
        const lowercasedDeliveryType = deliveryType.toLocaleLowerCase();

        for (let i = 0; i < labels.length; i++) {
          const label = labels[i].innerHTML.trim();
          let hide = false;
          let containsMethod = false;
          const lowercasedLabel = label.toLocaleLowerCase();

          if (cartAttributes.indexOf('[sqft_sod_quantity]') > -1 && lowercasedDeliveryType !== 'pickup') {
            if (
              lowercasedLabel.indexOf('include') > -1 &&
              (
                lowercasedLabel.indexOf(lowercasedDeliveryType.replace('_', ' ')) > -1 ||
                lowercasedDeliveryType.replace('_', ' ').indexOf(lowercasedLabel) > -1
              )
            ) {
              containsMethod = true;
            }
          } else if (
            lowercasedLabel.indexOf('include') < 0 &&
            (
              lowercasedLabel.indexOf(lowercasedDeliveryType.replace('_', ' ')) > -1 ||
              lowercasedDeliveryType.replace('_', ' ').indexOf(lowercasedLabel) > -1
            )
          ) {
            containsMethod = true;
          }

          if (deliveryType === 'pickup' && label.indexOf('ick') < 0) {
            hide = true;
          } else if (deliveryType !== 'pickup' && label.indexOf('ick') > -1) {
            hide = true;
          } else if (!containsMethod) {
            hide = true;
          }

          const container = labels[i].parentNode.parentNode.parentNode;
          const input = container.getElementsByClassName('input-radio');
          if (hide === true) {
            container.classList.add('display-none');
          }
          input[0].checked = !hide;
        }
      };

      const fillStorageAddress = function () {
        const deliveryInput1 = document.querySelector('input[name="checkout[attributes][delivery_method]"]');
        const deliveryInput2 = document.querySelector('input[name="checkout[attributes][delivery_type]"]');
        const deliveryMethod = deliveryInput1 ? deliveryInput1.value : (deliveryInput2 ? deliveryInput2.value : null);

        if (
          window.localStorage.getItem('delivery_address') === null ||
          window.localStorage.getItem('delivery_address') === '' ||
          window.localStorage.getItem('delivery_method') === null ||
          window.localStorage.getItem('delivery_method') === 'pickup' ||
          deliveryMethod === 'pickup'
        ) {
          return;
        }

        const checkoutType = document.getElementById('checkout_shipping_address_address1') ? 'shipping' : 'billing';
        fillAddress(checkoutType);
      };

      const fillShippingPickupAddress = function () {
        if (
          window.localStorage.getItem('delivery_address') === null ||
          window.localStorage.getItem('delivery_address') === '' ||
          window.localStorage.getItem('delivery_method') === null ||
          window.localStorage.getItem('delivery_method') !== 'pickup'
        ) {
          return;
        }

        fillAddress('shipping');
      };

      const triggerEvent = (eventName, selector) => {
        const event = document.createEvent('HTMLEvents');
        const elements = document.querySelectorAll(selector);
        elements.forEach(function (el) {
          event.initEvent(eventName, true, false);
          el.dispatchEvent(event);
        });
      };

      const fillAddress = function (checkoutType) {
        const parts = (window.localStorage.getItem('delivery_address')).split(', ');
        if (parts.length < 1) {
          return;
        }

        if (typeof parts[3] !== 'undefined') {
          const elementId = 'checkout_' + checkoutType + '_address_country';
          const element = document.getElementById(elementId);
          for (let i = 0; i < element.options.length; i++) {
            const option = element.options[i];
            if (parts[3].indexOf(option.dataset.code) > -1) {
              option.selected = true;
              element.readOnly = true;
              triggerEvent('change', '#' + elementId);
              break;
            }
          }
        }

        const elementIds = ['address_address1', 'address_city', 'address_province'];
        for (let i = 0; i < elementIds.length; i++) {
          if (typeof parts[i] !== 'undefined') {
            const element = document.getElementById('checkout_' + checkoutType + '_' + elementIds[i]);
            element.value = parts[i];
            element.readOnly = true;
          }
        }

        if (
          window.localStorage.getItem('delivery_zipcode') !== null &&
          window.localStorage.getItem('delivery_zipcode') !== ''
        ) {
          document.getElementById('checkout_' + checkoutType + '_address_zip').value = window.localStorage.getItem('delivery_zipcode');
        }
        if (
          window.localStorage.getItem('delivery_phone') !== null &&
          window.localStorage.getItem('delivery_phone') !== ''
        ) {
          document.getElementById('checkout_' + checkoutType + '_address_phone').value = window.localStorage.getItem('delivery_phone');
        }
      };

      const checkBreadcrumbLinks = function () {
        const linkElements = document.getElementsByClassName('breadcrumb__link');
        const isThereACartLink = [].slice.call(linkElements).some(el => el.innerHTML === 'Cart');
        if (!isThereACartLink) {
          const breadcrumb = document.getElementsByClassName('breadcrumb')[0];
          const html = '<li class="breadcrumb__item breadcrumb__item--completed">' +
            '<a class="breadcrumb__link" data-trekkie-id="breadcrumb_cart_link" href="{{ shop.secure_url }}{{ routes.cart_url }}">Cart</a>' +
            '<svg class="icon-svg icon-svg--color-adaptive-light icon-svg--size-10 breadcrumb__chevron-icon" aria-hidden="true" focusable="false"> <use xlink:href="#chevron-right"></use> </svg>' +
          '</li>';
          breadcrumb.insertAdjacentHTML('afterbegin', html);
        }
      };

      const insertAttributes = function () {
        if (!cartAttributes) {
          return;
        }

        document.querySelector('.main__content form').insertAdjacentHTML('beforeend', cartAttributes);
      };

      const startCheckoutStepObserver = function (targetNode, callback) {
        if (!targetNode) {
          return;
        }

        const config = { attributes: true, childList: true, characterData: true };
        const callbackFunction = function (mutationsList, observer) {
          for (let index = 0; index < mutationsList.length; index++) {
            const mutation = mutationsList[index];
            if (mutation.type == 'childList') {
              observer.disconnect();
              callback();
              return;
            }
          }
        };
        let observer = new MutationObserver(callbackFunction);
        observer.observe(targetNode, config);
      };

      const checkContactDelivery = function () {
        const deliveryInput1 = document.querySelector('input[name="checkout[attributes][delivery_method]"]');
        const deliveryInput2 = document.querySelector('input[name="checkout[attributes][delivery_type]"]');
        const deliveryMethod = deliveryInput1 ? deliveryInput1.value : (deliveryInput2 ? deliveryInput2.value : null);

        if (!deliveryMethod || !document.querySelector('#section-delivery-title')) {
          return;
        }

        const contentBox = document.querySelector('#checkout_pick_up_in_store_selected + .content-box');
        const labels = [].slice.call(contentBox.getElementsByClassName('radio__label__primary'));
        for (let i = 0; i < labels.length; i++) {
          const label = labels[i].innerHTML.trim();
          let hide = false;

          if (deliveryMethod === 'pickup' && label.indexOf('ick') < 0) {
            hide = true;
          } else if (deliveryMethod !== 'pickup' && label.indexOf('ick') > -1) {
            hide = true;
          }

          const container = labels[i].parentNode.parentNode.parentNode;
          const input = container.getElementsByClassName('input-radio');
          if (hide === true) {
            container.classList.add('display-none');
          }

          input[0].checked = !hide;
        }

        checkCustomerAddress();
        startCheckoutStepObserver(document.querySelector('div[data-delivery-pickup-info] div[data-pickup-tab-content]'), function () {
          checkCustomerAddress();
        });
      };

      const checkCustomerAddress = function () {
        const addressInput = document.querySelector('input[name="checkout[attributes][customer_address]"]');
        if (!addressInput) {
          return;
        }

        const addressParts = addressInput.value.split('-');
        if (addressParts.length < 1) {
          return;
        }

        const storeAddress = addressParts[addressParts.length - 1].trim().replace(/,/g, ' ').replace(/\s{2,}/g, ' ').toLocaleLowerCase();
        findAndSelectPickupStore(storeAddress.replace(/\s[0-9]+$/g, ''));
      };

      const findAndSelectPickupStore = function (addressPart) {
        const storeSelects = document.querySelectorAll('div[data-pickup-tab-content] .radio__label__primary');
        let found = false;

        if (addressPart.length > 1) {
          for (let i = 0; i < storeSelects.length; i++) {
            const store = storeSelects[i];
            const storeAddress = store.querySelector('.small-text').textContent.trim().replace(/,/g, ' ').replace(/\s{2,}/g, ' ').toLocaleLowerCase();
            const input = (store.parentNode.parentNode).querySelector('.input-radio');
            input.parentNode.parentNode.parentNode.classList.add('display-none');

            if (
              storeAddress === addressPart ||
              storeAddress.indexOf(addressPart) > -1 ||
              addressPart.indexOf(storeAddress) > -1
            ) {
              input.checked = true;
              input.parentNode.parentNode.parentNode.classList.remove('display-none');
              found = true;
            }
          }
        }

        if (!found) {
          for (let i = 0; i < storeSelects.length; i++) {
            const input = (storeSelects[i].parentNode.parentNode).querySelector('.input-radio');
            input.parentNode.parentNode.parentNode.classList.remove('display-none');
          }
        }
      };

      if (
        Shopify.Checkout.step === 'shipping_method' &&
        window.localStorage.getItem('delivery_type') !== null &&
        window.localStorage.getItem('delivery_type') !== 'undefined'
      ) {
        hideShippingMethods();
      } else if (Shopify.Checkout.step === 'contact_information') {
        insertAttributes();
        checkContactDelivery();
        hideDeliveryOptions();
        setTimeout(function () {
          fillStorageAddress();
        }, 1000);

        startCheckoutStepObserver(document.querySelector('main'), function () {
          insertAttributes();
          checkContactDelivery();
          hideDeliveryOptions();
        });
      }

      checkBreadcrumbLinks();
    </script>
  </body>
</html>
